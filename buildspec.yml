version: 0.2
env:
  variables:
    BRANCH_NAME: "automate-test"
    GITHUB_OWNER: "/pywsitest/build/GITHUB_OWNER"
    GITHUB_REPO: "/pywsitest/build/GITHUB_REPO"
    GITHUB_TOKEN: "/pywsitest/build/GITHUB_TOKEN"
    PYPI_TOKEN: "/pywsitest/build/PYPI_TOKEN"
    PYPI_NAME: "/pywsitest/build/PYPI_NAME"
phases:
  install:
    runtime-versions:
      python: 3.7
    commands:
      - chmod +x ./tools/*.sh
      - ./tools/hub-installer.sh && PATH=$PATH:/opt/tools/hub/bin
      - ./tools/git_tag_1.sh

#      - pip install --upgrade pip
#      - pip install -q bandit coverage==4.5.4 schema pylint_quotes prospector==1.3.1
#      - pip install -r requirements.txt
#      - pip install poetry
#      - # updates the dependencies and sets in poetry lock
#      - poetry update
#       configuring repositories
#      - poetry config repositories.git https://github.com/gridsmartercities/pywsitest
#      - poetry config repositories.testpypi https://test.pypi.org/legacy/
#       installs the dependencies based on poetry lock
#      - poetry install
#       Give execute permissions to all build scripts
#      - chmod +x ./tools/*.sh
  pre_build:
    commands:
      - export LOG_LEVEL=CRITICAL
#      - export OUR_COMMIT_SHA=`git rev-parse HEAD`
#      - echo Running Tests
#      - echo $GITHUB_OWNER
#      - bandit -r .
#      - prospector
#      - coverage run --source="." -m unittest
#      - coverage report -m --fail-under=100 --omit=*/__init__.py,tests/*,setup.py
#      - poetry check
  build:
    commands:
      - echo "1"
      # bumps up version ie: 0.4.0 to specified build number
#      - poetry version $VERSION
      # builds the source and wheels archives
#      - poetry build
      # publishes the package to git
#      - poetry publish -r git --username GITHUB_OWNER --password GITHUB_TOKEN --dry-run
     # adds new git tag based on pyproject.toml version
#      - tools/git_tag_1.sh

  post_build:
    commands:
      - echo "1"
      # publishes the package to pypi
#      - poetry publish -r testpypi --username PYPI_NAME --password PYPI_TOKEN --dry-run
